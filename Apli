import pandas as pd
from flask import Flask
import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import plotly.express as px
from flask import render_template_string

# Cargar los datos
file_id = "1PWTw-akWr59Gu7MoHra5WXMKwllxK9bp"
url = f"https://drive.google.com/uc?export=download&id={file_id}"
df = pd.read_csv(url)

# Clasificación por edad
def clasificar_edad(edad):
    if edad < 13:
        return "Niño"
    elif edad < 19:
        return "Adolescente"
    elif edad < 30:
        return "Joven"
    elif edad < 61:
        return "Adulto"
    elif edad < 200:
        return "Adulto mayor"

df['Rango de Edad'] = df['EDAD'].apply(clasificar_edad)

# Clasificación por días de espera
def clasificar_dias(dias):
    if dias < 10:
        return "0-9"
    elif dias < 20:
        return "10-19"
    elif dias < 30:
        return "20-29"
    elif dias < 40:
        return "30-39"
    elif dias < 50:
        return "40-49"
    elif dias < 60:
        return "50-59"
    elif dias < 70:
        return "60-69"
    elif dias < 80:
        return "70-79"
    elif dias < 90:
        return "80-89"
    else:
        return "90+"

df['RANGO_DIAS'] = df['DIFERENCIA_DIAS'].apply(clasificar_dias)

# Crear servidor Flask compartido
server = Flask(__name__)

# Ruta raíz
@server.route('/')
def index():
    return render_template_string("""
    
        
            
            Bienvenido

            Explora las siguientes visualizaciones:

            
                Distribución por Edad
                Tiempos de Espera
                Modalidad de Atención
                Estado del Seguro
                Línea de Tiempo
            

        

    
    """)

# App 1: Por Rango de Edad
app_edad = dash.Dash(__name__, server=server, url_base_pathname='/edad/')
app_edad.layout = html.Div([
    html.H1("Distribución por Rango de Edad"),
    html.Label("Filtrar por Rango de Edad:"),
    dcc.Dropdown(
        id='edad-filter',
        options=[{'label': edad, 'value': edad} for edad in ["Niño", "Adolescente", "Joven", "Adulto", "Adulto mayor"]] + [{'label': 'Todos', 'value': 'Todos'}],
        value='Todos',
        multi=False
    ),
    dcc.Graph(id='histogram-edad'),
    dcc.Graph(id='pie-chart-edad', figure=px.pie(names=[], values=[], title="Seleccione una barra en el histograma"))
])

@app_edad.callback(
    [Output('histogram-edad', 'figure'),
     Output('pie-chart-edad', 'figure')],
    [Input('edad-filter', 'value'),
     Input('histogram-edad', 'clickData')]
)
def update_edad_charts(edad_filter, clickData):
    filtered_df = df.copy()
    if edad_filter != 'Todos':
        filtered_df = filtered_df[filtered_df['Rango de Edad'] == edad_filter]
    
    fig_histogram = px.histogram(
        filtered_df,
        x='Rango de Edad',
        category_orders={'Rango de Edad': ["Niño", "Adolescente", "Joven", "Adulto", "Adulto mayor"]},
        title='Distribución de edades de los pacientes del hospital María Auxiliadora',
        labels={'Rango de Edad': 'Rango de Edad'},
        template='plotly_white'
    )
    
    if clickData is None:
        return fig_histogram, px.pie(names=[], values=[], title="Seleccione una barra en el histograma", height=500)

    selected_range = clickData['points'][0]['x']
    pie_df = filtered_df[filtered_df['Rango de Edad'] == selected_range].copy()
    top_especialidades = pie_df['ESPECIALIDAD'].value_counts().nlargest(5)
    pie_df['ESPECIALIDAD_AGRUPADA'] = pie_df['ESPECIALIDAD'].apply(
        lambda x: x if x in top_especialidades.index else 'Otras'
    )
    grouped = pie_df['ESPECIALIDAD_AGRUPADA'].value_counts().reset_index()
    grouped.columns = ['ESPECIALIDAD', 'CUENTA']
    fig_pie = px.pie(
        grouped,
        names='ESPECIALIDAD',
        values='CUENTA',
        title=f"Top 5 Especialidades para el rango de edad '{selected_range}'",
        height=600
    )
    return fig_histogram, fig_pie

# App 2: Por Rango de Días de Espera
app_espera = dash.Dash(__name__, server=server, url_base_pathname='/espera/')
app_espera.layout = html.Div([
    html.H1("Distribución por Tiempo de Espera"),
    html.Label("Filtrar por Rango de Días:"),
    dcc.Dropdown(
        id='espera-filter',
        options=[{'label': dias, 'value': dias} for dias in ["0-9", "10-19", "20-29", "30-39", "40-49", "50-59", "60-69", "70-79", "80-89", "90+"]] + [{'label': 'Todos', 'value': 'Todos'}],
        value='Todos',
        multi=False
    ),
    dcc.Graph(id='histogram-espera'),
    dcc.Graph(id='pie-chart-espera', figure=px.pie(names=[], values=[], title="Seleccione una barra en el histograma"))
])

@app_espera.callback(
    [Output('histogram-espera', 'figure'),
     Output('pie-chart-espera', 'figure')],
    [Input('espera-filter', 'value'),
     Input('histogram-espera', 'clickData')]
)
def update_espera_charts(espera_filter, clickData):
    filtered_df = df.copy()
    if espera_filter != 'Todos':
        filtered_df = filtered_df[filtered_df['RANGO_DIAS'] == espera_filter]
    
    fig_histogram = px.histogram(
        filtered_df,
        x='RANGO_DIAS',
        category_orders={'RANGO_DIAS': ["0-9", "10-19", "20-29", "30-39", "40-49", "50-59", "60-69", "70-79", "80-89", "90+"]},
        title='Distribución de la Cantidad de Pacientes según su Tiempo de Espera',
        labels={'RANGO_DIAS': 'Rango de Días'},
        template='plotly_white'
    )
    
    if clickData is None:
        return fig_histogram, px.pie(names=[], values=[], title="Seleccione una barra en el histograma", height=500)

    selected_range = clickData['points'][0]['x']
    pie_df = filtered_df[filtered_df['RANGO_DIAS'] == selected_range].copy()
    top_especialidades = pie_df['ESPECIALIDAD'].value_counts().nlargest(5)
    pie_df['ESPECIALIDAD_AGRUPADA'] = pie_df['ESPECIALIDAD'].apply(
        lambda x: x if x in top_especialidades.index else 'Otras'
    )
    grouped = pie_df['ESPECIALIDAD_AGRUPADA'].value_counts().reset_index()
    grouped.columns = ['ESPECIALIDAD', 'CUENTA']
    fig_pie = px.pie(
        grouped,
        names='ESPECIALIDAD',
        values='CUENTA',
        title=f"Top 5 Especialidades para el rango de espera '{selected_range}' días",
        height= ਜ

    return fig_histogram, fig_pie

# App 3: Por Modalidad de Cita
app_modalidad = dash.Dash(__name__, server=server, url_base_pathname='/modalidad/')
app_modalidad.layout = html.Div([
    html.H1("Distribución por Modalidad de Cita"),
    html.Label("Filtrar por Especialidad:"),
    dcc.Dropdown(
        id='especialidad-filter',
        options=[{'label': esp, 'value': esp} for esp in df['ESPECIALIDAD'].unique()] + [{'label': 'Todas', 'value': 'Todas'}],
        value='Todas',
        multi=False
    ),
    dcc.Graph(id='pie-modalidad'),
    dcc.Graph(id='bar-especialidad-modalidad', figure=px.bar(
        pd.DataFrame(columns=['ESPECIALIDAD', 'DIFERENCIA_DIAS']),
        x='ESPECIALIDAD',
        y='DIFERENCIA_DIAS',
        title="Seleccione una modalidad en el gráfico de pastel"
    ))
])

@app_modalidad.callback(
    [Output('pie-modalidad', 'figure'),
     Output('bar-especialidad-modalidad', 'figure')],
    [Input('especialidad-filter', 'value'),
     Input('pie-modalidad', 'clickData')]
)
def update_modalidad_charts(especialidad_filter, clickData):
    filtered_df = df.copy()
    if especialidad_filter != 'Todas':
        filtered_df = filtered_df[filtered_df['ESPECIALIDAD'] == especialidad_filter]
    
    fig_pie = px.pie(
        filtered_df,
        names='PRESENCIAL_REMOTO',
        title='Distribución de Citas: Remotas vs Presenciales',
        template='plotly_white'
    )
    
    if clickData is None:
        return fig_pie, px.bar(x=[], y=[], title="Seleccione una modalidad en el gráfico de pastel")
    
    modalidad = clickData['points'][0]['label']
    bar_df = filtered_df[filtered_df['PRESENCIAL_REMOTO'] == modalidad]
    mean_wait = bar_df.groupby('ESPECIALIDAD')['DIFERENCIA_DIAS'].mean().reset_index()
    mean_wait = mean_wait.sort_values(by='DIFERENCIA_DIAS', ascending=False)
    
    fig_bar = px.bar(
        mean_wait,
        x='ESPECIALIDAD',
        y='DIFERENCIA_DIAS',
        title=f"Media de Días de Espera por Especialidad ({modalidad})",
        labels={'DIFERENCIA_DIAS': 'Días de Espera'},
        template='plotly_white'
    )
    return fig_pie, fig_bar

# App 4: Por Estado de Seguro
app_seguro = dash.Dash(__name__, server=server, url_base_pathname='/asegurados/')
app_seguro.layout = html.Div([
    html.H1("Distribución por Estado del Seguro"),
    html.Label("Filtrar por Sexo:"),
    dcc.Dropdown(
        id='sexo-filter',
        options=[{'label': sexo, 'value': sexo} for sexo in df['SEXO'].unique()] + [{'label': 'Todos', 'value': 'Todos'}],
        value='Todos',
        multi=False
    ),
    dcc.Graph(id='pie-seguro'),
    dcc.Graph(id='bar-espera-seguro', figure=px.bar(
        pd.DataFrame(columns=['SEXO', 'DIFERENCIA_DIAS']),
        x='SEXO',
        y='DIFERENCIA_DIAS',
        title="Seleccione una modalidad en el gráfico de pastel"
    ))
])

@app_seguro.callback(
    [Output('pie-seguro', 'figure'),
     Output('bar-espera-seguro', 'figure')],
    [Input('sexo-filter', 'value'),
     Input('pie-seguro', 'clickData')]
)
def update_seguro_charts(sexo_filter, clickData):
    filtered_df = df.dropna().copy()
    if sexo_filter != 'Todos':
        filtered_df = filtered_df[filtered_df['SEXO'] == sexo_filter]
    
    fig_pie = px.pie(
        filtered_df,
        names='SEGURO',
        title='Distribución de Pacientes: Asegurados vs No Asegurados',
        template='plotly_white'
    )
    
    if clickData is None:
        return fig_pie, px.bar(x=[], y=[], title="Seleccione una modalidad en el gráfico de pastel")
    
    seguro = clickData['points'][0]['label']
    bar_df = filtered_df[filtered_df['SEGURO'] == seguro]
    mean_wait = bar_df.groupby('SEXO')['DIFERENCIA_DIAS'].mean().reset_index()
    mean_wait = mean_wait.sort_values(by='DIFERENCIA_DIAS', ascending=False)
    
    fig_bar = px.bar(
        mean_wait,
        x='SEXO',
        y='DIFERENCIA_DIAS',
        title=f"Media de Días de Espera por SEXO ({seguro})",
        labels={'DIFERENCIA_DIAS': 'Días de Espera'},
        template='plotly_white'
    )
    fig_bar.update_yaxes(range=[18, 21])
    return fig_pie, fig_bar

# App 5: Línea de Tiempo
df['DIA_SOLICITACITA'] = pd.to_datetime(df['DIA_SOLICITACITA'], errors='coerce')
df['MES'] = df['DIA_SOLICITACITA'].dt.to_period('M').astype(str)
citas_por_mes = df.groupby('MES').size().reset_index(name='CANTIDAD_CITAS')

app = dash.Dash(__name__, server=server, url_base_pathname='/tiempo/')
app.layout = html.Div([
    html.H1("Citas Agendadas por Mes"),
    html.Label("Filtrar por Año:"),
    dcc.Dropdown(
        id='year-filter',
        options=[{'label': year, 'value': year} for year in df['MES'].str[:4].unique()] + [{'label': 'Todos', 'value': 'Todos'}],
        value='Todos',
        multi=False
    ),
    dcc.Graph(id='grafico-lineal'),
    html.Div([
        dcc.Graph(id='grafico-pie-especialidades'),
        dcc.Graph(id='grafico-pie-atencion')
    ])
])

@app.callback(
    [Output('grafico-lineal', 'figure'),
     Output('grafico-pie-especialidades', 'figure'),
     Output('grafico-pie-atencion', 'figure')],
    [Input('year-filter', 'value'),
     Input('grafico-lineal', 'clickData')]
)
def actualizar_graficos(year_filter, clickData):
    filtered_df = df.copy()
    if year_filter != 'Todos':
        filtered_df = filtered_df[filtered_df['MES'].str.startswith(year_filter)]
    
    citas_por_mes = filtered_df.groupby('MES').size().reset_index(name='CANTIDAD_CITAS')
    fig_line = px.line(
        citas_por_mes,
        x='MES',
        y='CANTIDAD_CITAS',
        markers=True,
        title='Cantidad de Citas por Mes'
    )
    
    if clickData is None:
        return fig_line, px.pie(names=[], values=[], title="Seleccione un mes"), px.pie(names=[], values=[], title="Seleccione un mes")

    mes_seleccionado = pd.to_datetime(clickData['points'][0]['x']).to_period('M').strftime('%Y-%m')
    df_mes = filtered_df[filtered_df['MES'] == mes_seleccionado]
    top_especialidades = df_mes['ESPECIALIDAD'].value_counts().nlargest(5)
    df_mes['ESPECIALIDAD_AGRUPADA'] = df_mes['ESPECIALIDAD'].apply(
        lambda x: x if x in top_especialidades.index else 'Otras'
    )
    grouped = df_mes['ESPECIALIDAD_AGRUPADA'].value_counts().reset_index()
    grouped.columns = ['ESPECIALIDAD', 'CUENTA']
    grouped = grouped.sort_values(by='CUENTA', ascending=False)
    
    fig_especialidades = px.pie(grouped, names='ESPECIALIDAD', values="CUENTA", title=f'Distribución de Especialidades en {mes_seleccionado}')
    fig_atencion = px.pie(df_mes, names='ATENDIDO', title=f'Estado de Atención en {mes_seleccionado}')
    
    return fig_line, fig_especialidades, fig_atencion

# Ejecutar el servidor
if __name__ == '__main__':
    server.run(debug=True)
